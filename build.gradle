allprojects {
    apply plugin: 'idea'
}

/**
 * This task is used to start all of the local infrastructure,
 * in order to test the service locally. It expects localstack
 * to be running, and that the app credentials are stored in
 * environment variables
 */
task runLocalService(type: Task) {
    subprojects.each { dependsOn("${it.name}:assemble") }
    doLast {
        println('Checking environment variables to ensure credentials are present')
        validateCredentials(System.getenv())

        println('Checking to make sure Localstack is currently running..')
        exec {
            commandLine('./healthcheck.sh')
        }
        println('Creating local infrastructure from CDK')
        exec {
            commandLine('aws', 'cloudformation', 'create-stack',
                    '--region', 'us-east-1',
                    '--endpoint-url', 'http://localhost:4566',
                    '--stack-name', 'song-requests',
                    '--template-body', 'file://cdk/cdk.out/CdkStack.template.json',
                    '--parameters',
                    'ParameterKey=TwitchClientId,ParameterValue="' + System.getenv('TWITCH_CLIENT_ID') + '"',
                    'ParameterKey=TwitchClientSecret,ParameterValue="' + System.getenv('TWITCH_CLIENT_SECRET') + '"',
                    'ParameterKey=SpotifyClientId,ParameterValue="' + System.getenv('SPOTIFY_CLIENT_ID') + '"',
                    'ParameterKey=SpotifyClientSecret,ParameterValue="' + System.getenv('SPOTIFY_CLIENT_SECRET') + '"'
            )
        }
        println('Mapping SQS ARNs to environment variables')
    }
}

/**
 * Check the input map (expected to be map of System environment variables),
 * for the required app credentials.
 * @param vars A map of environment variable keys to their respective string values
 * @throws RuntimeException if any of the required keys are missing, or if any of
 *                          the values are empty
 */
static def validateCredentials(Map<String, String> vars) {
    if (!vars.containsKey('TWITCH_CLIENT_ID') || vars.get('TWITCH_CLIENT_ID', '').length() < 1) {
        throw new RuntimeException('TWITCH_CLIENT_ID not configured in environment')
    }
    if (!vars.containsKey('TWITCH_CLIENT_SECRET') || vars.get('TWITCH_CLIENT_SECRET', '').length() < 1) {
        throw new RuntimeException('TWITCH_CLIENT_SECRET not configured in environment')
    }
    if (!vars.containsKey('SPOTIFY_CLIENT_ID') || vars.get('SPOTIFY_CLIENT_ID', '').length() < 1) {
        throw new RuntimeException('SPOTIFY_CLIENT_ID not configured in environment')
    }
    if (!vars.containsKey('SPOTIFY_CLIENT_SECRET') || vars.get('SPOTIFY_CLIENT_SECRET', '').length() < 1) {
        throw new RuntimeException('SPOTIFY_CLIENT_SECRET not configured in environment')
    }
}
